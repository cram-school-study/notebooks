Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-11-02T09:06:01+09:00

====== 2 ======
Created 월요일 02 11월 2020

플라스크

클로저 - 파이썬에서 사용할 수 있는 함수 안의 함수 정의?
		   - 클래스와 유사하게 바깥함수의 값을 저장하고있다.

도커 책 - 도커/쿠버네티스


어플리케이션 팩토리 - 플라스크 앱 실행 변수를 전역변수로 두면 위험하기때문에 별도로 함수를 만들어서 실행 함수를 만드는것.

블루프린트 - main.py에 url 경로 다 때려박은것을 해결할 수 있음.
				 - 폴더별 url별로 블루프린트 기능을 활용하면 파일 분할 가능.
				 - 파일의 접속 경로별 파일 분할 가능할 수 있도록 해주는 기능

* 파이썬 메인함수는 무조건 절대경로로 실행
-> run으로 실행시에는 최상위단부터 읽고, (가상환경에서 설정 된 위치)
파이썬 terminal로 실행시에는 set을 해줄 FLASK_APP=__init__로 시작위치를 설정해줄 수 있기때문

ORM - 개발자가 직접 쿼리문을 작성하지않고, 테이블과 매핑된 모델 객체를 통해서 데이터를 작업을 처리하는 방식
	   - 추후에 mysql -> oracle db가 변경되는 일이 발생할 경우 모델을 사용하기때문에 쿼리문을 별도로 해당 db에 맞춰서 수정할 필요가 없어짐
	   - 개발자가 성능이 저하된 쿼리를 사용할 가능성이 사라짐.


* 해당 flask 프로젝트에서는 orm 라이브러리로 SQLAlchemy(에스큐엘알키미)를 사용
* Flask-Migrate 라이브러리 - 데이터베이스의 테이블 수정 및 추가 등의 변경 사항을 적용할 수 있게 도와주는 라이브러리

-> Flask-Migrate 라이브러리에 SQLAlchemy 포함 되어있음


1. flask db init - 데이터베이스 관리 초기파일 생성
2. flask db migrate - 모델 신규 생성 및 변경
3. flask db upgrade - 변경된 내용 저장
flask shell - 플라스크 실행에 필요한 환경들이 자동으로 설정된 후 실행되는 쉘
* SQLAlchemy의 초기설정은 오토커밋이 아니다. 따로 해야함.

클래스.query.all() - 모든 객체 목록 조회
클래스.query.filter(클래스.id==?).all() - filer로 걸러지는 객체 리스트 값으로 반환
클래스.query.filter(클래스.subject.like('%플라스크%')).all() - filer로 걸러지는 객체 리스트 값으로 반환
클래스.query.get(1) - 무조건 1개의 객체가 리턴되기 때문에 해당 객체값이 리턴

Question.query.order_by(Question.create_date.desc())
- Question.create_date.desc() 순으로 정렬(역순)

* 템플릿 태그
- 파이썬에서 반환한 값들을 이용하여 html에서 식을 짜는것.

1. 분기
{% if 조건문1 %}
{% elif 조건문2 %}
{% else %}
{% endif %}

2. 반복
{% for item in list %}
	<p>순서: {{ loop.index }} </p>
	<p>{{ item }}</p>
{% endfor %}


loop 속성	설명
loop.index	루프내의 순서로 1부터 표시
loop.index0	루프내의 순서로 0부터 표시
loop.first	루프의 첫번째 순서인 경우 True
loop.last	루프의 마지막 순서인 경우 True

3. 객체 출력
{{ item }}
{{ 객체.속성 }}


* db blob 타입 알아보기 - 바이너리 타입
* flask run,  (pycharm run ==  python3  ) 두개 차이점 알아보기

