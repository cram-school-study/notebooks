Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-08-17T13:45:10+09:00

====== java ======
Created 월요일 17 8월 2020

java -> class 컴파일시에 주석은 컴파일 되지않음.
즉, 디컴파일시에도 주석은 알아낼 수가 없음.

이클립스가 생기기전에는 editplus가 개발툴로 사용되었다.
다만, 개발자에게 도움이되는 기능을 제공하지 못해 밀림.

작성규칙
1. 첫번째 글자는 문자이거나 '$', '_' 이어야하고, 숫자로 시작 할 수 없다.

변수의 초기값은 코드에서 직접 입력하는 경우가 많은데, 소스코드 내에서 직ㅈ버 인력된 값을 리터럴이라고 부른다.

메서드 블록 내에서 선언된 변수를 로컬변수라고 한다.

자바는 기본적으로 정수연산을 int탕비으로 수행한다.
자바는 모든 문자를 유니코드로 처리한다.
char 형식은 char=''일시에 컴파일 에러가 발생한다. -유니코드값이 들어가야하기때문.
short타입은 c언어와 바이트수가 다르기때문에 호환이 되지않아 비교적 사용하지 않는다.

자동타입변환시 char -> 다른형식으로는 가능하지만 다른형식 ->char로는 불가능하다. - 컴파일 에러
이유는, char형식이 음수를 지원하지 않기 때문.

각 해당 변수타입들의 최대,최소값 상수는 ex)Byte.MAX_VALUE, Byte.MIN_VALUE 등으로 사용가능하다.

자바는 리터럴 간의 연산은 타입변환없이 해당 타입으로 계산한다.
다만, 변수에 값을 더하면 int타입으로 변환되기 때문에, 산출타입은 int타입이 된다.

오버플로우
산출연산시 해당 변수가 충분히 표현이 가능한지 확인해야한다.
오버플로우가 발생하면 쓰레기값을 얻을 수 있기 때문.

--------------------
정확한 계산은 정수사용
float, double 각각 표현 못하는 지점이 있음.
ex) float - 0.7 표현x, 0.1표현 o
	 double - 0.1 표현 x 
다만, 최초 리터럴로 선언시에는 구애받지 않고 제대로 표현된다.
---> 책에서는 둘다 0.1을 명확히 표현할수 없다고 나오는데 0.1 + 0.1은 왜 표현이 되는지 이해 불가능

NaN과 Infinity 연산
Infinity - 숫자 계산시 0으로 나눌경우
NaN - 숫자 계산시 0으로 나눈 나머지 값
-> 둘다 계산 불가능
valueof 메서드
--------------------

비교연산자에서는 연산을 수행하기 전에 타입 변환을 통해 피연산자의 타입을 일치시킨다.
다만, 0.1 == 0.1f와 같은 경우는 0.1이 이진포맷의 가수를 사용하는 모든 부동소수점 타입은
0.1을 정확하게 표시할수가 없어서 false가 나온다.

& 보다 &&가 , | 보다 || 가 효율이 더 좋다
- 한개는 두쪽 다 확인하나, &는 한개만 결과가 확실해도 바로 끝내버리기 때문.

반복문 조건 안에 변수 선언시 해당 변수는 밖으로 못나옴


